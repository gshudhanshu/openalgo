services:
  openalgo:
    image: openalgo:latest
    build:
      context: .
      dockerfile: Dockerfile

    container_name: openalgo-web
    
    # Expose ports for Coolify to map
    expose:
      - "5000"
      - "8765"
    
    # Alternative: Direct port mapping (comment out if using expose only)
    # ports:
    #   - "5000:5000"
    #   - "8765:8765"
    
    # Use persistent volumes that Coolify can manage
    volumes:
      - openalgo_db:/app/db
      - openalgo_logs:/app/logs

    # Environment variables that Coolify can manage
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - FLASK_PORT=${FLASK_PORT:-5000}
      - WEBSOCKET_PORT=${WEBSOCKET_PORT:-8765}
      # Database configuration
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app/db/openalgo.db}
      # API Security
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
      # Optional broker-specific configurations
      - BROKER_NAME=${BROKER_NAME:-}
      - BROKER_API_KEY=${BROKER_API_KEY:-}
      - BROKER_API_SECRET=${BROKER_API_SECRET:-}
      # Logging configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # WebSocket configuration
      - WEBSOCKET_CORS_ALLOWED_ORIGINS=${WEBSOCKET_CORS_ALLOWED_ORIGINS:-*}

    # Health check for Coolify monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Labels for Coolify management
    labels:
      - "coolify.managed=true"
      - "coolify.version=1.0"
      - "coolify.name=openalgo"
      - "coolify.description=OpenAlgo Trading Platform"

    restart: unless-stopped

    # Coolify network (will be created by Coolify)
    networks:
      - coolify

# Named volumes for persistent data
volumes:
  openalgo_db:
    driver: local
  openalgo_logs:
    driver: local

# Coolify network
networks:
  coolify:
    external: true
